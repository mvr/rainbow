type A
type B
type C

let diag : A -> (A * A) =
  fun a -> <a, a>

don't let tensordiag : A -> (A ⊗ A) =
  fun a -> << a, a >>

let pr : (B * A) -> A =
  fun p -> snd p

don't let tensorpr : (B ⊗ A) -> A =
  fun t ->  
  tensormatch t at A with       
    <<b, a>>[bc,ac] -> a

let unit : A -> ♮A = 
  fun a -> undin _a

let counit : (♮A) -> A = 
  fun a -> undout a

let idem : (♮♮A) -> ♮A = 
  fun a -> undin (undout (undout _a))

let sym : (A ⊗ B) -> (B ⊗ A) = 
  fun p -> 
  tensormatch p at B ⊗ A with
    <<x , y>>[xc, yc] -> <<y, x>>

let assoc : ((A ⊗ B) ⊗ C) -> (A ⊗ (B ⊗ C)) = 
  fun t -> 
  tensormatch t at A ⊗ (B ⊗ C) with
  <<p, z>>[pc,zc] -> 
    tensormatch (pc/pc' ⊗ zc/zc') | p, z at (pc' ⊗ zc') | p'[pc'], z'[zc'] -> A ⊗ (B ⊗ C) with
    p' = <<x , y>>[xc, yc] -> <<x, <<y, z'>> >>

let homunit : A -> (B ⊸ (A ⊗ B)) = 
  fun a -> hom[ac, bc] b -o <<a, b>>

let homcounit : ((B ⊸ A) ⊗ B) -> A =
  fun t -> 
  tensormatch t at A with
    <<f , b>>[fc, bc] -> (f @ b)

let homcurry : ((A ⊗ B) ⊸ C) -> (A ⊸ (B ⊸ C)) = 
  fun f ->
  hom[fc, ac] a -o
  hom[fc', bc] b -o
  (f @ << a, b >>)

-- TODO: allow not binding new colours
-- TODO: pretty printing
-- TODO: implement unit ?!?!
