let id : (A : U<0>) -> (A -> A) =
    fun a -> fun x -> x
 
let sym : (A : U<0>) (B : U<0>) (p : _A ⊗ _B) -> (_B ⊗ _A) = 
  fun A B p -> 
  tensormatch p at z -> _B ⊗ _A with
    <<x, y>> -> <<y, x>>

let lax : (A : U<0>) (B : _A -> U<0>) (n : ♮((x : _A) ⊗ _B _x)) -> (y : ♮ _A) * ♮ (_B (undout _y)) =
  fun A B n ->
  tensormatch (undout n) at z -> ((y : ♮ _A) * ♮ (_B (undout _y))) with
    <<x, y>> -> <undin _x, undin _y>
