let id : (A : U<0>) -> (A -> A) =
    fun a -> fun x -> x

let sym : (A : U<0>) (B : U<0>) (p : _A ⊗ _B) -> (_B ⊗ _A) = 
  fun A B p -> 
  tensormatch p at _B ⊗ _A with
    <<x, y>> -> <<y, x>>

let lax : (A : U<0>) (B : _A -> U<0>) (n : ♮((x : _A) ⊗ _B _x)) -> (y : ♮ _A) * ♮ (_B (undout _y)) =
  fun A B n ->
  tensormatch (undout n) at z -> ((y : ♮ _A) * ♮ (_B (undout _y))) with
    <<x, y>> -> <undin _x, undin _y>

let assocsimple : (A : U<0>) (B : U<0>) (C : U<0>) (p : (_A ⊗ _B) ⊗ _C) -> (_A ⊗ (_B ⊗ _C)) = 
  fun A B C t -> 
  tensormatch t at _A ⊗ (_B ⊗ _C) with
  <<p, z>>[pc,zc] -> 
    tensormatch (pc/pc' ⊗ zc/zc') | p, z at (pc' ⊗ zc') | (p'[pc'] : _A ⊗ _B) (z'[zc'] : _C) -> _A ⊗ (_B ⊗ _C) with
    p' = <<x , y>> -> <<x, <<y, z'>> >>

let assocdep : (A : U<0>) (B : _A -> U<0>) (C : (x : _A) -> ((_B _x) -> U<0>))
    (t : (p : ((x : _A) ⊗ _B _x)) ⊗ (tensormatch _p at U<0> with <<x, y>> -> _C _x _y)) -> ((x : _A) ⊗ ((y : _B _x) ⊗ (_C _x _y))) = 
    fun A B C t ->
    tensormatch t at ((x : _A) ⊗ ((y : _B _x) ⊗ (_C _x _y))) with
     <<p, z>>[pc,zc] -> 
       tensormatch (pc/pc' ⊗ zc/zc') | p, z 
                at (pc' ⊗ zc')       | (p'[pc'] : (x : _A) ⊗ _B _x) (z'[zc'] : (tensormatch _p' at U<0> with <<x, y>> -> _C _x _y)) 
                -> ((x : _A) ⊗ ((y : _B _x) ⊗ (_C _x _y))) with
       p' = <<x , y>> -> <<x, <<y, z'>> >>  

-- The problem is when checking that p has the right type in the
-- second tensormatch. Zeroing is broken right now, the length of
-- `env` is getting out of sync with the number of vars
